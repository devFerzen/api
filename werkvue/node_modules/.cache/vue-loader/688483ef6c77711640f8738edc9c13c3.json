{"remainingRequest":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\src\\views\\Contratante\\ContratanteEdit.vue?vue&type=template&id=bf76d85a&scoped=true&lang=html&","dependencies":[{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\src\\views\\Contratante\\ContratanteEdit.vue","mtime":1618076399843},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}