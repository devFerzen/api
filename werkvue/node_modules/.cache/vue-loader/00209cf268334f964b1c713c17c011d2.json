{"remainingRequest":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\src\\components\\modalesGlobales\\RegistroPrincipal.vue?vue&type=template&id=064d12b8&scoped=true&","dependencies":[{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\src\\components\\modalesGlobales\\RegistroPrincipal.vue","mtime":1604979851510},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aqual\\repositorioWerk\\playgroundWerk\\werkvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}